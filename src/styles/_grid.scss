@use 'sass:math';

$grid-columns: 12;

$grid-gaps: (
    '0': 0,
    '1': 10px,
    '2': 20px,
    '3': 30px
);
 
$layouts-values: flex-start, flex-end, center, space-between, space-around;
$layouts-values-aligns: flex-start, flex-end, center, baseline, stretch;




@include xs {
    .container-xs {
        width: 100%;
        max-width: 1000px;
        margin: 0 auto;
    }
}


@include xl {
    .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
    }
}


.row {
    display: flex;
    flex-flow: row wrap;
}


//grid-gaps 
@include xs {
    @each $k, $v in $grid-gaps {
        .col-gap-xs-#{$k} > * { // > direct descendants, class of direct children of row
            padding-left: $v;
            padding-right: $v;
        }
        .col-gap-xs-#{$k} { // class for row 
            margin-left: -$v; // because we need to eliminate white spaces in corners of start and end of table
            margin-right: -$v;
        }

        .row-gap-xs-#{$k} > * {
            padding-top: $v;
            padding-bottom: $v;
        }

        .row-gap-xs-#{$k} {
            margin-top: -$v;
            margin-bottom: -$v;
        }
    }
}

@include xl {
    @each $k, $v in $grid-gaps {
        .col-gap-xl-#{$k} > * { // > direct descendants, class of direct children of row
            padding-left: $v;
            padding-right: $v;
        }
        .col-gap-xl-#{$k} { // class for row 
            margin-left: -$v; // because we need to eliminate white spaces in corners of start and end of table
            margin-right: -$v;
        }

        .row-gap-xl-#{$k} > * {
            padding-top: $v;
            padding-bottom: $v;
        }

        .row-gap-xl-#{$k} {
            margin-top: -$v;
            margin-bottom: -$v;
        }
    }
}



//justi
@include xs {
    @each $val in $layouts-values {
        .justify-xs-#{$val} {
            justify-content: $val;
        }
    }
    
    @each $val in $layouts-values-aligns {
        .align-xs-#{$val} {
            align-items: $val;
        }
    }
}

@include xl {
    @each $val in $layouts-values {
        .justify-xl-#{$val} {
            justify-content: $val;
        }
    }
    
    @each $val in $layouts-values-aligns {
        .align-xl-#{$val} {
            align-items: $val;
        }
    }
}

@include xs {
    @for $i from 1 through $grid-columns {
        .col-xs-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            flex-shrink: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}


@include sm {
    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            flex-shrink: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-md-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            flex-shrink: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            flex-shrink: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-xl-#{$i} {
            box-sizing: border-box;
            flex-grow: 0;
            flex-shrink: 0;
            width: math.div($i * 100%, $grid-columns);
        }
    }
}
